@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.EntityFrameworkCore
@using fhj_est_customer_portal.Data
@using fhj_est_customer_portal.Entities
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext

<PageTitle>Home</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello @context.User.GetFullName</h1>
        <p>User ID: @userId</p>
        <p>Email: @userEmail</p>
        <p>Role: @userRole</p>
        <h2>Your Books:</h2>

        @if(userBooks == null)
        {
            <p>Loading...</p>
        }
        else 
        {
            if (userBooks.Count == 0)
            {
                <p>You have no books.</p>
            }
            else
            {
                foreach (var book in userBooks)
                {
                    <p>@book.Title</p>
                }
            }
        }
    </Authorized>
    <NotAuthorized>
        <p>You are not authorized</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string userId;
    private string userEmail;
    private string userRole;
    private List<Books> userBooks;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;

           
            userBooks = await DbContext.Books.Where(b => b.UserId == userId).ToListAsync();
        }
    }
}