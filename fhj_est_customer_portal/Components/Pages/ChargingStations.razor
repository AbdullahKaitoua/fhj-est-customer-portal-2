@page "/chargingstations"
@using Microsoft.AspNetCore.Authorization
@using fhj_est_customer_portal.Services
@inject ChargingStationService ChargingStationService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims
@using fhj_est_customer_portal.Entities
@attribute [Authorize]
@rendermode InteractiveServer


<h3>Charging Stations</h3>

<select @onchange="OnLocationSelected">
    <option value="">All Locations</option>
    @foreach (var locationName in locationNames)
    {
        <option value="@locationName">@locationName</option>
    }
</select>

@if (chargingStations == null)
{
    <p><em>Loading...</em></p>
}
else
{
    if (chargingStations.Count == 0)
    {
        <p>You have no charging stations.</p>
    }
    else
    {
        <table class='table table-hover'>
            <thead>
                <tr>
                    <th>Location Name</th>
                    <th>Charging Station</th>
<th></th>
                  
                </tr>
            </thead>
            <tbody>
                @foreach (var chargingStation in chargingStations)
                {
                    <tr>
                        <td>@chargingStation.Location.Name</td>
                        <td>@chargingStation.Name</td>
                        <td>
                            <a href="/chargingstationdetails/@chargingStation.Uuid">View Details</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private string? UserId;
    private List<ChargingStation>? chargingStations;
    private List<string> locationNames = new();
    private string selectedLocationName = "";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            UserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (UserId != null)
            {
                locationNames = await ChargingStationService.GetLocationNamesByUserId(UserId);
            }
            await LoadChargingStations();
        }
    }

    private async Task LoadChargingStations()
    {
        chargingStations = await ChargingStationService.GetChargingStationsByUserIdAndLocation(UserId, selectedLocationName);
    }

    private async Task OnLocationSelected(ChangeEventArgs e)
    {
        selectedLocationName = e.Value?.ToString();
        await LoadChargingStations();
    }
}
